# Run nginx worker as the current user instead of 'nobody'
user <%= ENV['USER'] %> staff;

worker_processes 1;

events {
  worker_connections 1024;
}

http {
  charset utf-8;
  default_type application/octet-stream;
  include mime.types;

  sendfile on;
  keepalive_timeout 65;

  # No limit on client request body size. Defaults to 1m. Zero disables.
  client_max_body_size 0;

  # Provide the Pow host root dir as an Nginx variable so per-app nginx
  # configs can dynamically set server root directories relative to it.
  # We could process per-app config as ERB templates instead, but that'd
  # require reloading Powprox whenever they change.
  #
  # (Hax to set a variable in HTTP context since 'set' may only be used in
  # server blocks. The source variable is ignored entirely; we just set
  # $pow_host_root to the default value every time.)
  map $http_host $pow_host_root { default "<%= pow_host_root %>"; }

  # SSL setup
  ssl_certificate <%= ssl_certificate %>;
  ssl_certificate_key <%= ssl_certificate_key %>;
  ssl_session_cache shared:SSL:32k; # 1MB = ~4000 sessions, so 32kB = ~100 sessions
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;

  # Proxy HTTP 1.1 by default instead of 1.0. Allows chunked responses
  # and WebSockets connection upgrades.
  proxy_http_version 1.1;
  proxy_set_header Connection "";

  # Don't rewrite Location response headers.
  proxy_redirect off;

  # Tell upstreams the original host, IP, scheme, etc.
  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;

  # Allow larger routes (ie. MS Teams auth params)
  proxy_buffer_size 8k;

  # Cache public responses
  proxy_cache_path "<%= powprox_dir %>/nginx/proxy_cache" levels=1:2 keys_zone=powprox_cache:1m inactive=60m max_size=100m use_temp_path=off;
  proxy_cache powprox_cache;

  # Perform backend cache updates one at a time, not in parallel
  proxy_cache_lock on;
  proxy_cache_use_stale updating;

  # Indicate whether the response was pulled from the cache:
  #   X-Cache-Status: HIT/MISS
  add_header X-Cache-Status $upstream_cache_status;

  # Compress HTML, JSON, CSS, JavaScript, fonts, SVG
  gzip on;
  gzip_vary on;
  gzip_proxied any;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/font-woff image/svg+xml;

  # Pow @ localhost
  upstream pow {
    server 127.0.0.1:<%= pow_http_port %>;
    keepalive <%= pow_workers %>;
  }

  # Include optional per-site server config
  include "<%= powprox_dir %>/nginx/sites/*";

  # Default server proxies all domains to Pow
  server {
    listen 443 ssl http2 default_server;
    server_name <%= pow_domains.map { |domain| "~^(?<pow_host>.+)\.#{domain}$" } * ' ' %> ~^(?<pow_host>.+)(\.\d+)\{4\}\.xip\.io$;

    root "$pow_host_root/$pow_host/public";

    location / {
      try_files $uri @powprox;
    }

    # If assets are precompiled, serve with far-future expiry.
    # If the asset is missing, serve it from the app.
    location ~ ^/assets {
      error_page 404 = @powprox;
      expires max;
      add_header Cache-Control public;
    }

    location @powprox {
      internal;
      proxy_pass http://pow;
    }

    # App can reproxy responses from any URL by pointing X-Accel-Redirect here
    # and setting X-Reproxy-Url. Apps use this to serve files from internal
    # servers, to serve pages via private internals caches, etc.
    #
    # https://github.com/jeremy/rack-reproxy#nginx
    location /reproxy {
      internal;

      # Resolve reproxied hosts against Pow
      resolver 127.0.0.1:<%= pow_dns_port %>;

      # Capture the app's X-Reproxy-Url and proxy to it
      set $reproxy_url $upstream_http_x_reproxy_url;
      proxy_pass $reproxy_url;

      # Don't overflow buffers into tempfiles at all. Defaults to 1GB which
      # leads to lost connections and corrupt downloads.
      proxy_max_temp_file_size 0;

      # Send the browser's original request headers along to the backend.
      proxy_pass_request_headers on;

      # GET requests only! Turn off request bodies.
      proxy_method GET;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";

      # Support reproxied authentication using the app's X-Reproxy-Authorization
      set $reproxy_authorization $upstream_http_x_reproxy_authorization;
      proxy_set_header Authorization $reproxy_authorization;

      # Use the Content-Type the app provides, not the backend.
      proxy_hide_header Content-Type;
    }
  }

  # Compatibility with Homebrew's default nginx.conf
  include servers/*;
}
