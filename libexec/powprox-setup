#!/usr/bin/env bash
# Usage: powprox setup
# Summary: Sets up Nginx -> Pow proxy and prepares SSL certificates
# Help: This is safe to run anytime. It'll pick up where it left off.
# It'll install Nginx (if it isn't already), set up Pow proxy config
# (if it isn't already, etc…), create a root certificate authority,
# trust it in the Keychain, generate an SSL cert for all Pow domains,
# and configure Nginx to run as root (to bind privileged port 443).
set -e
[ -n "$POWPROX_DEBUG" ] && set -x

is_nginx_installed() {
  type -p nginx >/dev/null && \
    (nginx -V 2>&1 | grep -q 'built with OpenSSL 1\.\([^0]\|0\.[^0]\)') && \
    (nginx -V 2>&1 | grep -q 'http_v2_module' )
}

install_nginx() {
  brew update
  brew uninstall nginx || true
  brew install nginx
}

generate_nginx_config() {
  mkdir -p "$POWPROX_DIR/nginx"

  dest="$POWPROX_DIR/nginx/nginx.conf"
  old="${dest}.old"

  [ -f "$dest" ] && mv "$dest" "${old}"

  powprox-generate-nginx-config > "$dest"

  if [ -f "$old" ]; then
    if ! diff -q "$old" "$dest" >/dev/null; then
      echo "Generated new Nginx config. Differences from the old config:"
      diff -u "$old" "$dest" || true
    fi
  else
    echo "Generated new Nginx config."
  fi

  rm -rf "$POWPROX_DIR/nginx/sites" "$POWPROX_DIR/nginx/site-includes"
  mkdir "$POWPROX_DIR/nginx/sites" "$POWPROX_DIR/nginx/site-includes"
  ln -sf "$POWPROX_DIR/nginx/site-includes" /usr/local/etc/nginx/powprox

  local IFS=$'\n'
  for host_path in $(powprox-list-pow-hosts --paths); do
    host_conf_path="$host_path/config/powprox/nginx.conf"

    # Link optional per-site Nginx config
    if [ -f "$host_conf_path" ]; then
      # Use a content digest as link name to ensure unique config links.
      # That allows us to symlink sites in ~/.pow to each other as aliases
      # without duplicating nginx config.
      if ln -s "$host_conf_path" "$POWPROX_DIR/nginx/sites/$(md5 -q "$host_conf_path")" 2>/dev/null; then
        echo "Linked site config: ${host_path##*/}"
      else
        echo "Skipped site config: ${host_path##*/} (already linked by another site)"
      fi
    fi

    # Link optional per-site Nginx includes so config/powprox/nginx.conf
    # can use relative `include` directives:
    #   include powprox/site-name/rewrites.conf
    # references /usr/local/etc/nginx/powprox, a symlink to
    # ~/.powprox/site-includes, which is a dir of symlinks to each site's
    # config/nginx dir.
    host_conf_includes_path="$host_path/config/nginx"
    if [ -d "$host_conf_includes_path" ]; then
      ln -s "$host_conf_includes_path" "$POWPROX_DIR/nginx/site-includes/${host_path##*/}"
      echo "Linked nginx includes dir: ${host_path##*/}/config/nginx"
    fi

    # Touch tmp/powprox.enabled to tell the app that Powprox is proxying it.
    # Touch tmp/restart.txt to tell Pow to restart the app, allowing it to
    # see that Powprox is enabled.
    if [ -d "$host_path" ]; then
      mkdir -p "$host_path/tmp"
      touch "$host_path/tmp/powprox.enabled" "$host_path/tmp/restart.txt"
    fi
  done

  # Overwrite Homebrew's default nginx config since we can't use multiple
  # http directives or set toplevel config (like user) otherwise.
  ln -sf "$dest" /usr/local/etc/nginx/nginx.conf

  echo "Checking Nginx config…"
  sudo nginx -t
}

nginx_launchdaemon() {
  if [ -f ~/Library/LaunchDaemons/homebrew.mxcl.nginx.plist ]; then
    launchctl unload ~/Library/LaunchDaemons/homebrew.mxcl.nginx.plist >/dev/null 2>&1
    rm ~/Library/LaunchDaemons/homebrew.mxcl.nginx.plist
  fi

  if [ -f /Library/LaunchDaemons/homebrew.mxcl.nginx.plist ]; then
    sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist >/dev/null 2>&1
  fi

  if [ -f /Library/LaunchDaemons/homebrew.mxcl.nginx-full.plist ]; then
    sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx-full.plist >/dev/null 2>&1
  fi

  if [ -f /usr/local/opt/nginx-full/homebrew.mxcl.nginx-full.plist ]; then
    sudo cp /usr/local/opt/nginx-full/homebrew.mxcl.nginx-full.plist /Library/LaunchDaemons/
    sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx-full.plist
  elif [ -f /usr/local/opt/nginx/homebrew.mxcl.nginx.plist ]; then
    sudo cp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist /Library/LaunchDaemons/
    sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plist
  fi
}

nginx_selftest() {
  echo -n "Pow upstream: "
  curl -H host:pow http://localhost:20559/status.json
  echo
  echo -n "Nginx TLS proxy: "
  curl -H host:pow --insecure https://localhost:443/status.json
  echo
}

install_pow_reloader() {
  generate-hostwatcher-launchagent
  launchctl unload "$HOME/Library/LaunchAgents/com.basecamp.powprox.hostwatcher.plist" >/dev/null 2>&1
  launchctl load "$HOME/Library/LaunchAgents/com.basecamp.powprox.hostwatcher.plist"

  generate-nginxreloader-launchdaemon
  sudo launchctl unload /Library/LaunchDaemons/com.basecamp.powprox.nginxreloader.plist >/dev/null 2>&1
  sudo launchctl load /Library/LaunchDaemons/com.basecamp.powprox.nginxreloader.plist
}

powprox-create-server-certificate

echo -n "Checking for Nginx… "
if is_nginx_installed; then
  echo "installed with HTTP/2 support."
else
  echo "not installed with HTTP/2 support."
  install_nginx
fi
generate_nginx_config

echo "Launching Nginx"
nginx_launchdaemon

echo "Nginx self-test… "
nginx_selftest

echo "Installing ~/.pow watcher"
install_pow_reloader

echo "Done. Ready to roll!"
